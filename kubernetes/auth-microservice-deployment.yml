apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-microservice-deployment
  labels:
    app: shopify-backend-challenge-auth
spec:
  replicas: 3
  selector:
    matchLabels:
      app: shopify-backend-challenge-auth
  template:
    metadata:
      labels:
        app: shopify-backend-challenge-auth
    spec:
      containers:
        - name: auth-microservice
          image: wtrep/shopify-backend-challenge-auth:1.0.3
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
          env:
            - name: DB_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: backend-env-vars
                  key: DB_USERNAME
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: backend-env-vars
                  key: DB_NAME
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: DB_PASSWORD
            - name: JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: jwt-key
                  key: JWT_KEY
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.17
          env:
            - name: CLOUD_SQL_CREDENTIAL_FILE
              valueFrom:
                configMapKeyRef:
                  name: backend-env-vars
                  key: CLOUD_SQL_CREDENTIAL_FILE
            - name: DB_CONNECTION_STRING
              valueFrom:
                configMapKeyRef:
                  name: backend-env-vars
                  key: DB_CONNECTION_STRING
          command:
            - "/cloud_sql_proxy"
            - "-instances=$(DB_CONNECTION_STRING)"
            - "-credential_file=$(CLOUD_SQL_CREDENTIAL_FILE)"
          securityContext:
            runAsNonRoot: true
          volumeMounts:
            - name: sql-secret-mount
              mountPath: /secrets/
              readOnly: true
      volumes:
        - name: sql-secret-mount
          secret:
            secretName: sql-sa-secret  
